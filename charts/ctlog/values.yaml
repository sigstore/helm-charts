namespace:
  create: false
  name: ctlog-system

imagePullSecrets: []

server:
  replicaCount: 1
  config:
    key: treeID
    treeID: ""
  image:
    registry: ghcr.io
    repository: sigstore/scaffolding/ct_server
    pullPolicy: IfNotPresent
    version: v0.7.21@sha256:174e2924c5450da261583c2fde53e54f6810b84fb84a9b827492cc901b4f9b99
  livenessProbe:
    httpGet:
      path: /healthz
      port: 6962
    initialDelaySeconds: 10
  readinessProbe:
    httpGet:
      path: /healthz
      port: 6962
    initialDelaySeconds: 10
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    mountToken: false
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "6963"
  portHTTP: 6962
  portHTTPMetrics: 6963
  service:
#    backendConfig:
#      name: ctlog-backend-config
#      spec: # https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-configuration#configuring_ingress_features_through_backendconfig_parameters
#        securityPolicy:
#          name: ctlog-security-policy
#        logging:
#          enable: true
#        healthCheck:
#          port: 6962
#          requestPath: "/healthz"
#          type: HTTP
    type: ClusterIP
    ports:
      - name: 6962-tcp
        port: 80
        protocol: TCP
        targetPort: 6962
      - name: 6963-tcp
        port: 6963
        protocol: TCP
        targetPort: 6963
  ingress:
    enabled: false
    className: nginx
    hosts:
      - path: /
    annotations: {}
    tls: []
  ingresses:
    - enabled: false
      name: "gce-ingress"
      className: "gce"
      hosts:
        - host: fulcio.localhost
          paths:
            - path: /test
              pathType: Prefix
            - path: /other-shard
              serviceName: other-shard
      annotations: {}
      tls: []
      staticGlobalIP: lb-ext-ip
      frontendConfigSpec:   # https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-configuration#configuring_ingress_features_through_frontendconfig_parameters
        sslPolicy: ctlog-ssl-policy
        redirectToHttps:
          enabled: true
  extraArgs: []
  securityContext:
    runAsNonRoot: true
    runAsUser: 65533
  tolerations: []
  nodeSelector: {}
  affinity: {}

createtree:
  enabled: true
  name: createtree
  # This must be < 20 characters
  displayName: ctlog-tree
  image:
    registry: ghcr.io
    repository: sigstore/scaffolding/createtree
    pullPolicy: IfNotPresent
    version: v0.7.21@sha256:f614ad12fc076068a00f22dcb37d60abef2714f47f40466357f5a2232c9a41c0
  ttlSecondsAfterFinished: 3600
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    mountToken: true
  securityContext:
    runAsNonRoot: true
    runAsUser: 65533
  annotations: {}
  tolerations: []
  nodeSelector: {}
  affinity: {}

createctconfig:
  enabled: true
  replicaCount: 1
  backoffLimit: 6
  name: createctconfig
  initContainerImage:
    curl:
      registry: docker.io
      repository: curlimages/curl
      version: 8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
      imagePullPolicy: IfNotPresent
  image:
    registry: ghcr.io
    repository: sigstore/scaffolding/createctconfig
    pullPolicy: IfNotPresent
    version: v0.7.21@sha256:3d8f705f6527df131491ff83be09ad8703c2cb2eab4a771f5296725489d35df6
  fulcioURL: "http://fulcio-server.fulcio-system.svc"
  logPrefix: sigstorescaffolding
  privateKeyPasswordSecretName: ""
  ttlSecondsAfterFinished: 3600
  pubkeysecret: "ctlog-public-key"
  # If there's an existing private key that should be used for ctlog, specify
  # here. This is important if a key has been created and imported into TUF.
  privateSecret: ""
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    mountToken: true
  securityContext:
    runAsNonRoot: true
    runAsUser: 65533
  annotations: {}
  tolerations: []
  nodeSelector: {}
  affinity: {}

trillian:
  namespace: trillian-system
  logServer:
    name: trillian-logserver
    portRPC: 8091

# Force namespace of namespaced resources
forceNamespace: ""
